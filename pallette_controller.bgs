##################################
# IR Sensor Register and Addresses
##################################
const IR_ADDRESS = $5a

#register addresses
const PART_ID = $00
const REV_ID = $01
const SEQ_ID = $02
const INT_CFG = $03
const IRQ_ENABLE = $04
const IRQ_MODE1 = $05
const IEQ_MODE2 = $06
const HW_KEY = $07
const MEAS_RATE = $08
const ALS_RATE = $09
const PS_RATE = $0a
const ALS_LOW_TH0 = $0b
const ALS_LOW_TH1 = $0c
const ALS_HI_TH0 = $0d
const ALS_HI_TH1 = $0e
const PS_LED21 = $0f
const PS_LED3 = $10
const PS1_TH0 = $11
const PS1_TH1 = $12
const PS2_TH0 = $13
const PS2_TH1 = $14
const PS3_TH0 = $15
const PS3_TH1 = $16
const PARAM_WR = $17
const COMMAND = $18
const RESPONSE = $20
const IRQ_STATUS = $21
const ALS_VIS_DATA0 = $22
const ALS_VIS_DATA1 = $23
const ALS_IR_DATA0 = $24
const ALS_IR_DATA1 = $25
const PS1_DATA0 = $26
const PS1_DATA1 = $27
const PS2_DATA0 = $28
const PS2_DATA1 = $29
const PS3_DATA0 = $2a
const PS3_DATA1 = $2b
const AUX_DATA0 = $2c
const AUX_DATA1 = $2d
const PARAM_RD = $2e
const CHIP_STAT = $30
const ANA_IN_KEY = $3b

# ram addresses
const I2C_ADDR = $00
const CHLIST  = $01
const PSLED12_SELECT = $02
const PSLED3_SELECT = $03
const PS_ENCODING = $05
const ALS_ENCODING = $06
const PS1_ADCMUX = $07
const PS2_ADCMUX = $08
const PS3_ADCMUX = $09
const PS_ADC_COUNTER = $0a
const PS_ADC_GAIN = $0b
const PS_ADC_MISC = $0c
const ALS_IR_ADCMUX = $0e
const AUX_ADCMUX = $0f
const ALS_VIS_ADC_COUNTER = $10
const ALS_VIS_ADC_GAIN = $11
const ALS_VIS_ADC_MISC = $12
const ALS_HYST = $16
const PS_HYST = $17
const PS_HISTORY = $18
const ALS_HISTORY = $19
const ADC_OFFSET  = $1a
const LED_REC = $1c
const ALS_IR_ADC_COUNTER = $1d
const ALS_IR_ADC_GAIN = $1e
const ALS_IR_ADC_MISC = $1f

##################################
# General Variables
##################################
dim hid_attribute					# controls which GATT attribute is used for writing Hardware Interface Device data (normal or boot mode)
dim sensorComm(24)					# Buffer for sensor and button communication.
dim sensorCommPrev(24)				# Buffer for recorded last sensorVal

##################################
# IR Sensor Variables
##################################
const ir_number_of_sensors = 3		# Number of IR Sensors
const ir_bytes = 2					# Bytes that each IR readings take
dim write_reg_buffer(2)
dim i2c_result						# Result from I2C operation
dim data_len 						# Returned length from I2C read
dim ir_current_sensor				# Sensor currently active from which we get readings
dim ir_begin_byte					# Beginning byte for sensorComm buffer where the current sensor's value is being stored
dim ir_end_byte						# Ending byte for sensorComm buffer where the current sensor's value is being stored
dim ir_tri_state          #

##################################
# FSR Variables
##################################
const fsr_number_of_sensors = 1		# Number of Force Sensitive Resistors
const fsr_bytes = 2					# Bytes that each FSR readings take
dim fsr_offset 						# Offset of bytes in response
dim fsr_index						# Current FSR being read
dim fsr_result
dim fsr_begin_byte
dim fsr_end_byte
dim fsr_check

##################################
# Mouse Coordinate Variables
##################################
dim tmp(3)          				# buffer for `building attribute value (3-byte mouse HID report)


##################################
# Microphone Variables
##################################


##################################
# Toggle Button Variables
##################################


##################################
# I2C Auxiliary Functions
##################################

# Write to I2C register
procedure write_reg(regVal, dataVal)
	write_reg_buffer(0:1) = regVal
	write_reg_buffer(1:1) = dataVal
	call hardware_i2c_write(IR_ADDRESS << 1, 1,2, write_reg_buffer(0:2))
end

# Read from I2C register (Only PS1_DATA and PS0_Data for IR sensors)
procedure read_reg(regAddr)
	call hardware_i2c_write(IR_ADDRESS << 1, 0, 1, regAddr)

	ir_begin_byte = ir_current_sensor*ir_bytes
	ir_end_byte = ir_begin_byte + 1

	if regAddr = PS1_DATA0 then
		call hardware_i2c_read(IR_ADDRESS << 1, 1, 1)(i2c_result, data_len, sensorComm(ir_end_byte:1))
	else
		call hardware_i2c_read(IR_ADDRESS << 1, 1, 1)(i2c_result, data_len, sensorComm(ir_begin_byte:1))
	end if
end

#Â Set SI1141 parameters
procedure param_set(byteAddress, byteVal)
	call write_reg(PARAM_WR, byteVal)
	call write_reg(COMMAND, $a0 | byteAddress)
end

####################################################################
# Function to initialize all sensors. No need to block them since
# it is a write only operation.
####################################################################
procedure initializeSI1141()
	call write_reg(HW_KEY, $17)		# Initialization Mode
	call write_reg(PS_LED21, $01)	# Give the LED 1 max power (3.6V) for performance
	call param_set(CHLIST, $01)		# Set CHLIST
end

##################################
# Function that reads all data
# from IR and FSRs every time it
# is called
##################################
procedure getReadings()
	#######################
	# Read IR sensors Data
	#######################

	#copy last sensorVals
	sensorCommPrev(0) = sensorComm(0)
	sensorCommPrev(1) = sensorComm(1)
	sensorCommPrev(2) = sensorComm(2)
	sensorCommPrev(3) = sensorComm(3)
  sensorCommPrev(4) = sensorComm(4)
	sensorCommPrev(5) = sensorComm(5)

  	# Select all pins on port 1 (IR tristate buffer enable lines) and
  	# set them to enabled.
  	# Port 1, Pin Selection Mask 1111 1111, Pin Logical Mask 0000 0000
  	call hardware_io_port_write(1, $ff, 0)

  	# Ask all sensors to update their sensor value and store them in their
  	# respective memory.
  	call write_reg(COMMAND, $05)

  	ir_current_sensor = 0
  	while ir_current_sensor < ir_number_of_sensors

  		# Left shift 1 by number of current sensor. For 0 -> 001, 1 -> 010, 2-> 100
  		ir_tri_state = $01 << ir_current_sensor

  		# XOR tristate with 11111111 to invert: 001-> 110, 010 -> 101, 100 -> 011.
  		# This is neccesary, because the tristate buffer activates for 0.
  		ir_tri_state = ir_tri_state ^ $ff

  		# Enable a single IR sensor via ir_tri_state,
  		# And disable the rest.
  		call hardware_io_port_write(1, $ff, ir_tri_state)

  		# For Single IR Sensor, read IR Data and put it in ir_sensorComm buffer
  		#call read_reg(PS1_DATA0)
  		call read_reg(PS1_DATA1)

  		ir_current_sensor = ir_current_sensor + 1

  	end while

    # Select all pins on port 1 (IR tristate buffer enable lines) and
    # set them to disabled.
    # Port 1, Pin Selection Mask 1111 1111, Pin Logical Mask 1111 1111
  	call hardware_io_port_write(1, $ff, $ff)


    #MIC SECTION
    fsr_index = 0
  	while fsr_index < fsr_number_of_sensors
  		call hardware_adc_read(fsr_index, 3, 0) # 12 BITS READ ADC
  		fsr_index = fsr_index + 1
  	end while



    # For Debugging GATT IR
    # Writes IR readings to GATT Database for communication over BLE
    call attributes_write(hid_attribute, 0, ir_number_of_sensors*ir_bytes, sensorComm(0:ir_number_of_sensors*ir_bytes))

end



###############################################################
#############  Mouse Coordinate Generating Methods ############
###############################################################

const minDepth = 300
const maxDepth = 4000

dim leftRightRatio # =1 Ratio of left depth to right depth
dim topDownRatio

dim avgDepth # =300 Initialize average depth
dim prevAVGDepth

dim xCoord # build out coordinates on 100 by 100 grid (0 to 99)
dim yCoord # build out coordinates on 100 by 100 grid (0 to 99)
dim XYCoord(3)

dim LComm # Left Sensor
dim RComm # Right Sensor
dim TComm # Top Sensor

dim LCommPrev
dim RCommPrev
dim TCommPrev

dim dir
dim prevDir

# Keep former sensor values for relative position
procedure filterReadings()

	  leftRightRatio = 0
    topDownRatio = 0

	  LComm = sensorComm(0) >> 1
	  RComm = sensorComm(2) >> 1
    TComm = sensorComm(4) >> 1

	  LCommPrev = sensorCommPrev(0) >> 1
	  RCommPrev = sensorCommPrev(2) >> 1
    TCommPrev = sensorCommPrev(4) >> 1

	  leftRightRatio = RComm - LComm
    topDownRatio = -1*((TComm - 1.4*LComm)+(TComm-1.4*RComm))/2

    if topDownRatio < 0 then
    topDownRatio = topDownRatio*4
    else
    topDownRatio = topDownRatio*1.1
    end if

	avgDepth = ((1*(RComm)+1*LComm)/2)

end


procedure discernCoordinates()

prevDir = dir

# x coord
	  XYCoord(1) =   leftRightRatio

# y coord
# Moving Finger Away
	  if (avgDepth >prevAVGDepth) then
	       XYCoord(2) = -5
	     dir=1
	  end if



# Moving Finger Towards
	     if (avgDepth <prevAVGDepth) then
	       XYCoord(2) = 5
	       dir = -1
	      end if


# Resting Behavior
	      if (avgDepth =prevAVGDepth) then
	       XYCoord(2) = 0

	       if (dir =1)
	       	    XYCoord(2) = -3
	       end if

	       if (dir =-1)
	       	    XYCoord(2) = 3
	       end if


	      end if

XYCoord(2) = topDownRatio
prevAVGDepth = avgDepth

end

procedure writeCoordinatesToGATT()
	call attributes_write(hid_attribute, 0, 3, XYCoord(0:3)) #ir_number_of_sensors*ir_bytes, ) #sensorComm(0:ir_number_of_sensors*ir_bytes))
end


# System boot event listener
event system_boot(major, minor, patch, build, ll_version, protocol, hw)

      #initialize variables
      dir = 1
      prevDir = 0
      XYCoord(2) = 0#100

	#call hardware_io_port_config_direction(0,$ff)
	call hardware_io_port_config_direction(1, $ff)
	call hardware_io_port_write(1, $ff, $01 << 7)



	#fsr_offset = ir_number_of_sensors*ir_bytes
	#fsr_offset = 2
	## Begin by starting I2C device ##
	call initializeSI1141()

	## Set hardware timer to take periodic sensor readings
	call hardware_set_soft_timer(3000,0,0)

	## Initialize bluetooth communication ##

	# Set advertisement interval to 20ms per min, 30 ms max (units are 0.625ms)
	# Use all three advertisement channels (7 = bitmask 0b000001111)
	call gap_set_adv_parameters(32, 48, 7)

	# Start advertising (discoverable/connectable)
	call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)

	# Security
	call sm_set_bondable_mode(1)
	call sm_encrypt_start(0,1)

	# Assign gatt HID port to our attribute write var
	# use default report for mouse
    hid_attribute = hid_mouse

end

# Device Reading function
event hardware_soft_timer(handle)
	call write_reg(COMMAND, $05) 	# General command for I2C readings (leave outside)
	call getReadings() # records to first two bytes of sensorComm

	# Updated HID section
	#####
	call filterReadings()
	call discernCoordinates()
	call writeCoordinatesToGATT()

	#####
end

dim proper_value
dim micCheck
dim micVal

dim r_value
dim sequence(30)
dim micCounter
dim avgCounter
dim micAvg
dim micResult

dim last
dim rounds # bounce count for debouncing
dim toggle # resultToggle for debouncing

# Individual Mic reading
event hardware_adc_result(input, value)
  fsr_begin_byte = fsr_offset + (input*fsr_bytes)
  fsr_end_byte = fsr_begin_byte + fsr_bytes

  #LSB
  sensorComm(fsr_begin_byte+1:1) = (value >> 4 & $00ff)
  #MSB
  sensorComm(fsr_begin_byte:1) = ((value >> 12) & $00ff)

	proper_value = sensorComm(fsr_begin_byte:2)

  if last = 0 then
    last = proper_value
  end if


  micResult = 0
  if (last-proper_value > 1000) then
    micResult = 1
    if (rounds=0) && (toggle = 0) then
      micResult = 1
      rounds = 1000
      toggle = 1
    end if
  end if

  if rounds > 0 then
    rounds = rounds-1
  end if

  sensorComm(fsr_begin_byte:2) = 0
  last = proper_value

  XYCoord(0:1) = micResult


	#fsr_check = value >> 15
	#fsr_check = fsr_check & 1
	#fsr_begin_byte = fsr_offset + (input*fsr_bytes)
	#fsr_end_byte = fsr_begin_byte + fsr_bytes
	#if fsr_check = 0
	#	sensorComm(fsr_begin_byte:2) = (value >> 4)
	#end if
end


# Connection event listener
#event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
#	call gap_set_mode(gap_non_discoverable, gap_non_connectable )
#end

event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
    if flags &  connection_completed then
        # start 20ms repeating timer (655 / 32768 Hz ~= 0.020 sec)
        #call hardware_set_soft_timer(655, 0, 0)
        call hardware_set_soft_timer(655, 0, 0)

        # always initialize protocol mode to default 1 after connection
        call attributes_write(hid_protocol_mode, 0, 1, 1)
        hid_attribute = hid_mouse
    end if
end

event attributes_value(connection, reason, handle, offset, value_len, value_data)
    if value_data(0:1) = 1 then
        # switched to normal report mode
        hid_attribute = hid_mouse
    end if
    if value_data(0:1) = 2 then
        # switched to boot report mode
        hid_attribute = hid_boot_mouse
    end if
end


# Disconnection event listener
event connection_disconnected(connection, result)
	call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
end
